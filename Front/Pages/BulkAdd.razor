@page "/bulkadd"
@using AutoDiffusion.Models
@using Autodiffusion.Services
@using AutoDiffusion.Services
@inject INameService NameService
@inject LanguageService LanguageService

<div class="row">
    <div class="col-md-4">
        <h3>Bulk Add Names</h3>
        <!-- Drop-down for Country/Language -->
        <select @bind="_selectedCountry">
            @foreach (var country in _uniqueLanguages)
            {
                <option value="@country">@country</option>
            }
        </select>

        <!-- Drop-down for Type -->
        <select @bind="_selectedType">
            @foreach (var type in _uniqueTypes)
            {
                <option value="@type">@type</option>
            }
        </select>

        <textarea class="form-control" @bind="_bulkNames" placeholder="Enter names separated by linebreaks" rows="20"></textarea>
        <input type="checkbox" @bind="_replaceInsteadOfAdd" /> Replace existing names
        
        <button class="btn btn-primary" @onclick="BulkProcessNames">Submit</button>
    </div>
</div>

@code {
    private string _bulkNames;
    private string _selectedCountry = string.Empty;
    private string _selectedType = string.Empty;
    private bool _replaceInsteadOfAdd;
    private HashSet<string> _uniqueLanguages = new();
    private HashSet<string> _uniqueTypes = new();

    protected override async Task OnInitializedAsync()
    {
        var languageModels = await LanguageService.GetLanguagesAsync();
        _uniqueLanguages = new HashSet<string>(languageModels.Select(lang => lang.Language));
        _uniqueTypes = await NameService.GetUniqueTypesAsync();
        _selectedCountry = _uniqueLanguages.FirstOrDefault();
        _selectedType = _uniqueTypes.FirstOrDefault();
    }

    private async Task BulkProcessNames()
    {
        var namesArray = _bulkNames.Split('\n'); // Split by linebreaks
        var nameModels = namesArray.Select(name => new NameModel { Name = name.Trim(), Language = _selectedCountry, Type = _selectedType }).ToList();

        if (_replaceInsteadOfAdd)
        {
            await NameService.BulkReplaceNamesAsync(nameModels, _selectedCountry, _selectedType);
        }
        else
        {
            await NameService.BulkAddNamesAsync(nameModels);
        }

    // Clear the textarea
        _bulkNames = string.Empty;
    }
}