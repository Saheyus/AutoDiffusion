@page "/LanguageMixer"
@using AutoDiffusion.Services;
@using AutoDiffusion.Models;
@using System.Globalization;
@inject ConfigService ConfigService
@inject IJSRuntime JsRuntime
@inject ProbabilityService ProbabilityService

<h3 class="text-white">Language Mixer</h3>

<div>
    <button @onclick="AddLanguage" class="btn btn-primary mb-3">Add Language</button>
    @foreach (var lang in _selectedLanguages.Select((value, index) => (value, index)))
    {
        <div class="row align-items-center mb-2">
            <!-- Language dropdown -->
            <div class="col-lg-2">
                <select @onchange="(e) => UpdateLanguage(lang.index, e)" class="form-control" value="@lang.value.Language">
                    @foreach (var language in GetAvailableLanguagesForIndex(lang.index))
                    {
                        <option>@language</option>
                    }
                </select>
            </div>

            <!-- Slider -->
            <div class="col-lg-4">
                <input type="range" id="@($"slider-{lang.index}")" class="w-100" value="@lang.value.Weight.ToString("F2", CultureInfo.InvariantCulture)" @oninput="@(e => UpdateWeights(lang.index, e))" min="0" max="1" step="0.1" />
            </div>

            <!-- Weight value -->
            <div class="col-lg-1 text-center">
                <span>@Math.Round(lang.value.Weight, 2)</span>
            </div>

            <!-- Remove button -->
            <div class="col-lg-1 text-right">
                @if (lang.index > 1) 
                {
                    <button @onclick="() => RemoveLanguage(lang.index)" class="btn btn-danger">Remove</button>
                }
            </div>
        </div>
    }
    <div><input type="text" @bind="_newLanguageName" placeholder="New Language Name" /></div>
    <div><button @onclick="SaveMixedLanguage" class="btn btn-success mb-3 mt-2" disabled="@string.IsNullOrEmpty(_newLanguageName)">Save</button></div>
    <div class="row">
        <div class="col-12 col-md-6">
            @if (!string.IsNullOrEmpty(_feedbackMessage))
            {
                <div class="alert @_alertClass" role="alert">
                    @_feedbackMessage
                </div>
            }
            <div class="form-group">
                <label for="wordInput" class="text-white">Words to Check (comma-separated):</label>
                <input type="text" class="form-control" id="wordInput" @bind="_wordsToCheck" />
            </div>
            <button class="btn btn-primary" @onclick="CheckLanguages">Check</button>

            @if (_combinedMatchingLanguages != null)
            {
                if (_combinedMatchingLanguages.Count > 0)
                {
                    <table class="table text-white">
                        <thead>
                        <tr>
                            <th>Language</th>
                            <th>Combined Distance Score</th>
                            <th>Closest Words for Checked Words</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var match in _combinedMatchingLanguages)
                        {
                            <tr>
                                <td>@match.Key</td>
                                <td>@match.Value.MatchingScore</td>
                                <td>
                                    <ul>
                                        @foreach (var word in _closestWordsForEachLanguage.Keys)
                                        {
                                            if (_closestWordsForEachLanguage[word].ContainsKey(match.Key))
                                            {
                                                <li>@word: @_closestWordsForEachLanguage[word][match.Key]</li>
                                            }
                                        }
                                    </ul>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            }
            else
            {
                <p class="text-white">No result</p>
            }
        </div>
    </div>

</div>


@code {
    private List<string> _availableLanguages;
    private List<LanguageWeight> _selectedLanguages = new();
    private string _newLanguageName;
    string _feedbackMessage = "";
    string _alertClass = "alert-danger";
    private string _wordsToCheck;
    Dictionary<string, (int MatchingScore, string ClosestWord, string Description)> _combinedMatchingLanguages = new();
    Dictionary<string, Dictionary<string, string>> _closestWordsForEachLanguage = new();


    protected override async Task OnInitializedAsync()
    {
    // Load the configuration and supported languages
        await ConfigService.LoadCategories();
        _availableLanguages = ConfigService.Config.SupportedLanguages.ToList();

    // Initialize with two languages if the list is empty
        if (_selectedLanguages.Count == 0)
        {
            _selectedLanguages.Add(new LanguageWeight { Language = _availableLanguages[0], Weight = 0.5 });
            _selectedLanguages.Add(new LanguageWeight { Language = _availableLanguages[1], Weight = 0.5 });
        }
    }

    private IEnumerable<string> GetAvailableLanguagesForIndex(int index)
    {
        return _availableLanguages.Except(_selectedLanguages.Where((value, i) => i != index).Select(x => x.Language));
    }

    private void UpdateLanguage(int index, ChangeEventArgs e)
    {
        _selectedLanguages[index].Language = e.Value.ToString();
    }


    private void AddLanguage()
    {
        if (_selectedLanguages.Count < 3)
        {
            var firstAvailableLanguage = _availableLanguages.Except(_selectedLanguages.Select(x => x.Language)).FirstOrDefault();
            if (firstAvailableLanguage != null)
            {
                _selectedLanguages.Add(new LanguageWeight { Language = firstAvailableLanguage, Weight = 1.0 / (_selectedLanguages.Count + 1) });
                NormalizeWeights();
            }
        }
    }

    private void SaveMixedLanguage()
    {
        if (!string.IsNullOrEmpty(_newLanguageName))
        {
            List<(string Language, double Weight)> mixedLanguages = new List<(string Language, double Weight)>();
            foreach (var lang in _selectedLanguages)
            {
                mixedLanguages.Add((lang.Language, lang.Weight));
            }

            ProbabilityService.MixLanguageProbabilities(mixedLanguages, _newLanguageName);
            _feedbackMessage = "Language successfully mixed!";
            _alertClass = "alert-success";
        }
        else
        {
            _feedbackMessage = "Error: New language name cannot be empty.";
        }
    }

    private void RemoveLanguage(int index)
    {
        if (_selectedLanguages.Count > 2)
        {
            _selectedLanguages.RemoveAt(index);
            NormalizeWeights();
        }
    }

    private async void UpdateWeights(int changedIndex, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out double newWeight))
        {
            _selectedLanguages[changedIndex].Weight = newWeight;

            double remainingWeight = 1 - newWeight;
            int remainingItems = _selectedLanguages.Count - 1;

            for (int i = 0; i < _selectedLanguages.Count; i++)
            {
                if (i != changedIndex)
                {
                    _selectedLanguages[i].Weight = remainingWeight / remainingItems;
                }
            }

            StateHasChanged();  // Signal to Blazor that the component's state has changed
        }

    // After updating the weights, manually set the slider value using JS interop
        for (int i = 0; i < _selectedLanguages.Count; i++)
        {
            await JsRuntime.InvokeVoidAsync("updateSliderValue", $"slider-{i}", _selectedLanguages[i].Weight);
        }
    }

    private Task CheckLanguages()
    {
        var words = _wordsToCheck.Split(',').Select(w => w.Trim());
        _combinedMatchingLanguages.Clear();
        _closestWordsForEachLanguage.Clear();

        foreach (var word in words)
        {
            var matchingLanguages = ProbabilityService.CheckWordAgainstLanguages(word);
        
            foreach (var lang in matchingLanguages)
            {
                if (_combinedMatchingLanguages.ContainsKey(lang.Key))
                {
                    var existing = _combinedMatchingLanguages[lang.Key];
                    var newScore = existing.MatchingScore + lang.Value.MatchingScore;
                    _combinedMatchingLanguages[lang.Key] = (newScore, existing.ClosestWord, existing.Description);
                }
                else
                {
                    _combinedMatchingLanguages[lang.Key] = (lang.Value.MatchingScore, lang.Value.ClosestWord, lang.Value.Description);
                }

                if (!_closestWordsForEachLanguage.ContainsKey(word))
                {
                    _closestWordsForEachLanguage[word] = new Dictionary<string, string>();
                }
                _closestWordsForEachLanguage[word][lang.Key] = lang.Value.ClosestWord;
            }
        }

        _combinedMatchingLanguages = _combinedMatchingLanguages.OrderBy(x => x.Value.MatchingScore).ToDictionary(x => x.Key, x => x.Value);

        return Task.CompletedTask;
    }


    private void NormalizeWeights()
    {

        double equalWeight = 1.0 / _selectedLanguages.Count;
        foreach (var lang in _selectedLanguages)
        {
            lang.Weight = equalWeight;
        }
    }

    public class LanguageWeight
    {
        public string Language { get; set; }
        public double Weight { get; set; }
    }
}
